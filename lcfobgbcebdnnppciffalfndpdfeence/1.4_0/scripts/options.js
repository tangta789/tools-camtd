"use strict";new Vue({el:"#app",data:function(){return{config:{enabled:parseInt(this.valueKey("enabled",1)),path:this.valueKey("path","http://localhost:6800/jsonrpc"),size:parseFloat(this.valueKey("size",0)),enableFilter:this.valueKey("enableFilter","disabled"),filterUrls:this.valueKey("filterUrls","")},saved:!1,i18n:{title:this.getI18nMessage("optionsTitle"),off:this.getI18nMessage("optionsOff"),on:this.getI18nMessage("optionsOn"),ifIntercept:this.getI18nMessage("optionsIfIntercept"),fileSize:this.getI18nMessage("optionsFileSize"),aria2Prc:this.getI18nMessage("optionsAria2Prc"),save:this.getI18nMessage("optionsSave"),saved:this.getI18nMessage("optionsSaved"),blacklist:this.getI18nMessage("optionsBlacklist"),whitelist:this.getI18nMessage("optionsWhitelist"),filter:this.getI18nMessage("optionsFilter"),filterUrls:this.getI18nMessage("optionsFilterUrls"),blacklistHint:this.getI18nMessage("optionsBlacklistHint"),whitelistHint:this.getI18nMessage("optionsWhitelistHint"),errorReg:this.getI18nMessage("optionsErrorReg")},lastUrl:""}},watch:{config:{handler:function(){this.saved=!1},deep:!0}},computed:{urlBoxHint:function(){return"whitelist"===this.config.enableFilter?this.i18n.whitelistHint:this.i18n.blacklistHint}},methods:{getI18nMessage:function(t){return chrome.i18n.getMessage(t)},valueKey:function(t,e){return void 0===localStorage[t]?e:localStorage[t]},parseUrls:function parseUrls(){var _this=this,filterUrls=this.config.filterUrls;return filterUrls?filterUrls.split(/\n/).filter(function(t){return t.trim().length>0}).map(function(url){return _this.lastUrl=url,url="/"+url.trim()+"/",url=eval(url)}):[]},save:function(){console.log(this.config);try{console.log(this.parseUrls()),localStorage.filterUrlRegs=this.parseUrls();for(var t in this.config)localStorage[t]=this.config[t];this.saved=!0}catch(e){alert(this.i18n.errorReg+" "+this.lastUrl),console.log(e)}}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvb3B0aW9ucy5qcyJdLCJuYW1lcyI6WyJWdWUiLCJlbCIsImRhdGEiLCJjb25maWciLCJlbmFibGVkIiwicGFyc2VJbnQiLCJ0aGlzIiwidmFsdWVLZXkiLCJwYXRoIiwic2l6ZSIsInBhcnNlRmxvYXQiLCJlbmFibGVGaWx0ZXIiLCJmaWx0ZXJVcmxzIiwic2F2ZWQiLCJpMThuIiwidGl0bGUiLCJnZXRJMThuTWVzc2FnZSIsIm9mZiIsIm9uIiwiaWZJbnRlcmNlcHQiLCJmaWxlU2l6ZSIsImFyaWEyUHJjIiwic2F2ZSIsImJsYWNrbGlzdCIsIndoaXRlbGlzdCIsImZpbHRlciIsImJsYWNrbGlzdEhpbnQiLCJ3aGl0ZWxpc3RIaW50IiwiZXJyb3JSZWciLCJsYXN0VXJsIiwid2F0Y2giLCJoYW5kbGVyIiwiZGVlcCIsImNvbXB1dGVkIiwidXJsQm94SGludCIsIm1ldGhvZHMiLCJrZXkiLCJjaHJvbWUiLCJnZXRNZXNzYWdlIiwiZGVmYXVsdFZhbHVlIiwidW5kZWZpbmVkIiwibG9jYWxTdG9yYWdlIiwicGFyc2VVcmxzIiwiX3RoaXMiLCJzcGxpdCIsInVybCIsInRyaW0iLCJsZW5ndGgiLCJtYXAiLCJldmFsIiwiY29uc29sZSIsImxvZyIsImsiLCJlcnJvciIsImFsZXJ0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUVBLElBQUlBLE1BQ0FDLEdBQUksT0FDSkMsS0FBTSxXQUNGLE9BQ0lDLFFBQ0lDLFFBQVNDLFNBQVNDLEtBQUtDLFNBQVMsVUFBVyxJQUMzQ0MsS0FBTUYsS0FBS0MsU0FBUyxPQUFRLGlDQUM1QkUsS0FBTUMsV0FBV0osS0FBS0MsU0FBUyxPQUFRLElBQ3ZDSSxhQUFjTCxLQUFLQyxTQUFTLGVBQWdCLFlBQzVDSyxXQUFZTixLQUFLQyxTQUFTLGFBQWMsS0FFNUNNLE9BQU8sRUFDUEMsTUFDSUMsTUFBT1QsS0FBS1UsZUFBZSxnQkFDM0JDLElBQUtYLEtBQUtVLGVBQWUsY0FDekJFLEdBQUlaLEtBQUtVLGVBQWUsYUFDeEJHLFlBQWFiLEtBQUtVLGVBQWUsc0JBQ2pDSSxTQUFVZCxLQUFLVSxlQUFlLG1CQUM5QkssU0FBVWYsS0FBS1UsZUFBZSxtQkFDOUJNLEtBQU1oQixLQUFLVSxlQUFlLGVBQzFCSCxNQUFPUCxLQUFLVSxlQUFlLGdCQUMzQk8sVUFBV2pCLEtBQUtVLGVBQWUsb0JBQy9CUSxVQUFXbEIsS0FBS1UsZUFBZSxvQkFDL0JTLE9BQVFuQixLQUFLVSxlQUFlLGlCQUM1QkosV0FBWU4sS0FBS1UsZUFBZSxxQkFDaENVLGNBQWVwQixLQUFLVSxlQUFlLHdCQUNuQ1csY0FBZXJCLEtBQUtVLGVBQWUsd0JBQ25DWSxTQUFVdEIsS0FBS1UsZUFBZSxvQkFFbENhLFFBQVMsS0FJakJDLE9BQ0kzQixRQUNJNEIsUUFBUyxXQUNMekIsS0FBS08sT0FBUSxHQUVqQm1CLE1BQU0sSUFHZEMsVUFDSUMsV0FBWSxXQUNSLE1BQW9DLGNBQTdCNUIsS0FBS0gsT0FBT1EsYUFBK0JMLEtBQUtRLEtBQUthLGNBQWdCckIsS0FBS1EsS0FBS1ksZ0JBRzlGUyxTQUNJbkIsZUFBZ0IsU0FBd0JvQixHQUNwQyxNQUFPQyxRQUFPdkIsS0FBS3dCLFdBQVdGLElBRWxDN0IsU0FBVSxTQUFrQjZCLEVBQUtHLEdBQzdCLE1BQTZCQyxVQUF0QkMsYUFBYUwsR0FBcUJHLEVBQWVFLGFBQWFMLElBRXpFTSxVQUFXLFFBQVNBLGFBQ2hCLEdBQUlDLE9BQVFyQyxLQUVSTSxXQUFhTixLQUFLSCxPQUFPUyxVQUM3QixPQUFJQSxZQUNPQSxXQUFXZ0MsTUFBTSxNQUFNbkIsT0FBTyxTQUFVb0IsR0FDM0MsTUFBT0EsR0FBSUMsT0FBT0MsT0FBUyxJQUM1QkMsSUFBSSxTQUFVSCxLQUliLE1BSEFGLE9BQU1kLFFBQVVnQixJQUNoQkEsSUFBTSxJQUFNQSxJQUFJQyxPQUFTLElBQ3pCRCxJQUFNSSxLQUFLSixXQU12QnZCLEtBQU0sV0FDRjRCLFFBQVFDLElBQUk3QyxLQUFLSCxPQUNqQixLQUNJK0MsUUFBUUMsSUFBSTdDLEtBQUtvQyxhQUNqQkQsYUFBNEIsY0FBSW5DLEtBQUtvQyxXQUNyQyxLQUFLLEdBQUlVLEtBQUs5QyxNQUFLSCxPQUNmc0MsYUFBYVcsR0FBSzlDLEtBQUtILE9BQU9pRCxFQUVsQzlDLE1BQUtPLE9BQVEsRUFDZixNQUFPd0MsR0FDTEMsTUFBTWhELEtBQUtRLEtBQUtjLFNBQVcsSUFBTXRCLEtBQUt1QixTQUN0Q3FCLFFBQVFDLElBQUlFIiwiZmlsZSI6InNjcmlwdHMvb3B0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubmV3IFZ1ZSh7XG4gICAgZWw6ICcjYXBwJyxcbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogcGFyc2VJbnQodGhpcy52YWx1ZUtleSgnZW5hYmxlZCcsIDEpKSxcbiAgICAgICAgICAgICAgICBwYXRoOiB0aGlzLnZhbHVlS2V5KCdwYXRoJywgJ2h0dHA6Ly9sb2NhbGhvc3Q6NjgwMC9qc29ucnBjJyksXG4gICAgICAgICAgICAgICAgc2l6ZTogcGFyc2VGbG9hdCh0aGlzLnZhbHVlS2V5KCdzaXplJywgMCkpLFxuICAgICAgICAgICAgICAgIGVuYWJsZUZpbHRlcjogdGhpcy52YWx1ZUtleSgnZW5hYmxlRmlsdGVyJywgJ2Rpc2FibGVkJyksXG4gICAgICAgICAgICAgICAgZmlsdGVyVXJsczogdGhpcy52YWx1ZUtleSgnZmlsdGVyVXJscycsICcnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhdmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5nZXRJMThuTWVzc2FnZSgnb3B0aW9uc1RpdGxlJyksXG4gICAgICAgICAgICAgICAgb2ZmOiB0aGlzLmdldEkxOG5NZXNzYWdlKCdvcHRpb25zT2ZmJyksXG4gICAgICAgICAgICAgICAgb246IHRoaXMuZ2V0STE4bk1lc3NhZ2UoJ29wdGlvbnNPbicpLFxuICAgICAgICAgICAgICAgIGlmSW50ZXJjZXB0OiB0aGlzLmdldEkxOG5NZXNzYWdlKCdvcHRpb25zSWZJbnRlcmNlcHQnKSxcbiAgICAgICAgICAgICAgICBmaWxlU2l6ZTogdGhpcy5nZXRJMThuTWVzc2FnZSgnb3B0aW9uc0ZpbGVTaXplJyksXG4gICAgICAgICAgICAgICAgYXJpYTJQcmM6IHRoaXMuZ2V0STE4bk1lc3NhZ2UoJ29wdGlvbnNBcmlhMlByYycpLFxuICAgICAgICAgICAgICAgIHNhdmU6IHRoaXMuZ2V0STE4bk1lc3NhZ2UoJ29wdGlvbnNTYXZlJyksXG4gICAgICAgICAgICAgICAgc2F2ZWQ6IHRoaXMuZ2V0STE4bk1lc3NhZ2UoJ29wdGlvbnNTYXZlZCcpLFxuICAgICAgICAgICAgICAgIGJsYWNrbGlzdDogdGhpcy5nZXRJMThuTWVzc2FnZSgnb3B0aW9uc0JsYWNrbGlzdCcpLFxuICAgICAgICAgICAgICAgIHdoaXRlbGlzdDogdGhpcy5nZXRJMThuTWVzc2FnZSgnb3B0aW9uc1doaXRlbGlzdCcpLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogdGhpcy5nZXRJMThuTWVzc2FnZSgnb3B0aW9uc0ZpbHRlcicpLFxuICAgICAgICAgICAgICAgIGZpbHRlclVybHM6IHRoaXMuZ2V0STE4bk1lc3NhZ2UoJ29wdGlvbnNGaWx0ZXJVcmxzJyksXG4gICAgICAgICAgICAgICAgYmxhY2tsaXN0SGludDogdGhpcy5nZXRJMThuTWVzc2FnZSgnb3B0aW9uc0JsYWNrbGlzdEhpbnQnKSxcbiAgICAgICAgICAgICAgICB3aGl0ZWxpc3RIaW50OiB0aGlzLmdldEkxOG5NZXNzYWdlKCdvcHRpb25zV2hpdGVsaXN0SGludCcpLFxuICAgICAgICAgICAgICAgIGVycm9yUmVnOiB0aGlzLmdldEkxOG5NZXNzYWdlKCdvcHRpb25zRXJyb3JSZWcnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RVcmw6ICcnXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVlcDogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICB1cmxCb3hIaW50OiBmdW5jdGlvbiB1cmxCb3hIaW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmVuYWJsZUZpbHRlciA9PT0gJ3doaXRlbGlzdCcgPyB0aGlzLmkxOG4ud2hpdGVsaXN0SGludCA6IHRoaXMuaTE4bi5ibGFja2xpc3RIaW50O1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGdldEkxOG5NZXNzYWdlOiBmdW5jdGlvbiBnZXRJMThuTWVzc2FnZShrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBjaHJvbWUuaTE4bi5nZXRNZXNzYWdlKGtleSk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbHVlS2V5OiBmdW5jdGlvbiB2YWx1ZUtleShrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZVtrZXldID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiBsb2NhbFN0b3JhZ2Vba2V5XTtcbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2VVcmxzOiBmdW5jdGlvbiBwYXJzZVVybHMoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgZmlsdGVyVXJscyA9IHRoaXMuY29uZmlnLmZpbHRlclVybHM7XG4gICAgICAgICAgICBpZiAoZmlsdGVyVXJscykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJVcmxzLnNwbGl0KC9cXG4vKS5maWx0ZXIoZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnRyaW0oKS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxhc3RVcmwgPSB1cmw7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9ICcvJyArIHVybC50cmltKCkgKyAnLyc7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IGV2YWwodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24gc2F2ZSgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29uZmlnKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5wYXJzZVVybHMoKSk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlWydmaWx0ZXJVcmxSZWdzJ10gPSB0aGlzLnBhcnNlVXJscygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5jb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlW2tdID0gdGhpcy5jb25maWdba107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBhbGVydCh0aGlzLmkxOG4uZXJyb3JSZWcgKyAnICcgKyB0aGlzLmxhc3RVcmwpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pOyJdfQ==
